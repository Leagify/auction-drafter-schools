@page "/create-auction"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Leagify.AuctionDrafter.Shared.Models
@using Leagify.AuctionDrafter.Shared.Dtos
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Create New Auction</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (createdAuctionResponse != null)
{
    <div class="alert alert-success">
        <p>Auction "@createdAuctionResponse.AuctionName" created successfully!</p>
        <p><strong>Join Code:</strong> <span style="font-family: monospace; font-size: 1.2rem; background-color: #eee; padding: 2px 5px; border-radius: 4px;">@createdAuctionResponse.JoinCode</span></p>
        <p><small>(Share this code with other participants)</small></p>
        <p>
            <button class="btn btn-primary" @onclick="() => NavigateToAuction(createdAuctionResponse.AuctionId)">Go to Auction Management Page</button>
        </p>
    </div>
}

<EditForm Model="@model" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="auctionName" class="form-label">Auction Name:</label>
        <InputText id="auctionName" class="form-control" @bind-Value="model.AuctionName" />
        <ValidationMessage For="@(() => model.AuctionName)" />
    </div>

    <div class="mb-3">
        <label for="schoolDataCsv" class="form-label">School Data CSV:</label>
        <InputFile id="schoolDataCsv" class="form-control" OnChange="LoadFile" />
        @if (selectedFile != null)
        {
            <p class="mt-1">Selected file: @selectedFile.Name (@selectedFile.Size bytes)</p>
        }
    </div>

    <button type="submit" class="btn btn-success" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Creating...</span>
        }
        else
        {
            <span>Create Auction</span>
        }
    </button>
</EditForm>

@code {
    private CreateAuctionClientModel model = new CreateAuctionClientModel();
    private IBrowserFile? selectedFile;
    private string? errorMessage;
    private CreateAuctionResponseDto? createdAuctionResponse;
    private bool isLoading = false;

    // Client-specific model for the form binding, especially for InputFile
    public class CreateAuctionClientModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string AuctionName { get; set; } = "My Awesome Auction";
        // IBrowserFile is not part of the DTO sent to server, but used by InputFile
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        // You could add validation here for file type, size etc.
    }

    private async Task HandleValidSubmitAsync()
    {
        isLoading = true;
        errorMessage = null;
        createdAuctionResponse = null;

        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(model.AuctionName), "AuctionName");

        if (selectedFile != null)
        {
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // Max 10MB file
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "schoolDataCsvFile", selectedFile.Name);
        }

        try
        {
            var response = await Http.PostAsync("api/auction/create", content);

            if (response.IsSuccessStatusCode)
            {
                createdAuctionResponse = await response.Content.ReadFromJsonAsync<CreateAuctionResponseDto>();
                if (createdAuctionResponse != null)
                {
                    // Store the master token in local storage
                    var masterKey = $"auctionMasterToken_{createdAuctionResponse.AuctionId}";
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", masterKey, createdAuctionResponse.MasterToken);

                    // Don't navigate away immediately, show the success message with the Join Code.
                    // The user will click the button to navigate.
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error creating auction: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToAuction(int auctionId)
    {
        // Navigate to the management/details page for the auction
        NavigationManager.NavigateTo($"/auction-details/{auctionId}");
    }
}
