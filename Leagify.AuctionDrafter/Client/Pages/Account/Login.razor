@page "/account/login"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@* @inject HttpClient Http // No longer needed directly for login logic *@

<h3>Login</h3>

<EditForm Model="@model" OnValidSubmit="HandleLoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="model.Email" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <p>
        <NavLink href="account/register">Don't have an account? Register here.</NavLink>
    </p>

    <hr />
    <h5>Or login with:</h5>
    <p>
        <a href="api/account/signin/Google" class="btn btn-outline-danger">
            <span class="bi bi-google me-2"></span> Login with Google
        </a>
        <!-- Add other providers here if needed -->
    </p>
    <hr />


    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Logging in...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
</EditForm>

@code {
    private LoginRequestDto model = new LoginRequestDto();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleLoginAsync()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var authResponse = await AuthService.LoginAsync(model);

            if (authResponse != null && authResponse.IsSuccess)
            {
                // AuthService.LoginAsync now handles notifying the AuthenticationStateProvider.
                // The forceLoad helps ensure that the HttpMessageHandler (if any custom ones are used for auth tokens)
                // and the AuthenticationStateProvider re-evaluate state after login.
                // For cookie-based auth, a forceLoad ensures the new cookie state is fully recognized by the browser for subsequent requests.
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = authResponse?.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            // Log full exception ex for debugging
        }
        finally
        {
            isLoading = false;
        }
    }
}
